//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RealEstateWebsite.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RealEstateWebsiteEntities : DbContext
    {
        public RealEstateWebsiteEntities()
            : base("name=RealEstateWebsiteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountLog> AccountLogs { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Permission_Role> Permission_Role { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Role_Account> Role_Account { get; set; }
        public virtual DbSet<Block> Blocks { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Customer_Report> Customer_Report { get; set; }
        public virtual DbSet<Interested_Post> Interested_Post { get; set; }
        public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<Promotion_Detail> Promotion_Detail { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Block1> Block1 { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Quit> Quits { get; set; }
        public virtual DbSet<Detail> Details { get; set; }
        public virtual DbSet<Direction> Directions { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<Post_Image> Post_Image { get; set; }
        public virtual DbSet<Post_Report> Post_Report { get; set; }
        public virtual DbSet<Post_Status> Post_Status { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Project_Image> Project_Image { get; set; }
        public virtual DbSet<RealEstateType> RealEstateTypes { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Type1> Type1 { get; set; }
    
        public virtual ObjectResult<USP_AddManager_id_Result> USP_AddManager_id(Nullable<int> id, Nullable<int> id_manager)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var id_managerParameter = id_manager.HasValue ?
                new ObjectParameter("id_manager", id_manager) :
                new ObjectParameter("id_manager", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_AddManager_id_Result>("USP_AddManager_id", idParameter, id_managerParameter);
        }
    
        public virtual ObjectResult<USP_GetPostCountBydate_Result> USP_GetPostCountBydate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPostCountBydate_Result>("USP_GetPostCountBydate");
        }
    
        public virtual int USP_InsertAccountLog(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertAccountLog", idParameter);
        }
    
        public virtual int USP_InsertBlockCust(Nullable<int> id1, Nullable<System.DateTime> dateBl, Nullable<System.DateTime> dateUn, string reason, Nullable<int> id2, Nullable<System.DateTime> modified)
        {
            var id1Parameter = id1.HasValue ?
                new ObjectParameter("id1", id1) :
                new ObjectParameter("id1", typeof(int));
    
            var dateBlParameter = dateBl.HasValue ?
                new ObjectParameter("dateBl", dateBl) :
                new ObjectParameter("dateBl", typeof(System.DateTime));
    
            var dateUnParameter = dateUn.HasValue ?
                new ObjectParameter("dateUn", dateUn) :
                new ObjectParameter("dateUn", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var id2Parameter = id2.HasValue ?
                new ObjectParameter("id2", id2) :
                new ObjectParameter("id2", typeof(int));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("modified", modified) :
                new ObjectParameter("modified", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertBlockCust", id1Parameter, dateBlParameter, dateUnParameter, reasonParameter, id2Parameter, modifiedParameter);
        }
    
        public virtual int USP_InsertBlockEmp(Nullable<int> id, Nullable<System.DateTime> dateUn, string reason, Nullable<System.DateTime> modified)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var dateUnParameter = dateUn.HasValue ?
                new ObjectParameter("dateUn", dateUn) :
                new ObjectParameter("dateUn", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("modified", modified) :
                new ObjectParameter("modified", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertBlockEmp", idParameter, dateUnParameter, reasonParameter, modifiedParameter);
        }
    
        public virtual int USP_InsertQuitEmp(Nullable<int> id, string reason, Nullable<System.DateTime> modified)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("modified", modified) :
                new ObjectParameter("modified", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertQuitEmp", idParameter, reasonParameter, modifiedParameter);
        }
    
        public virtual int USP_UnBlockBlockCust(Nullable<int> id, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UnBlockBlockCust", idParameter, date1Parameter, date2Parameter);
        }
    
        public virtual int USP_UnBlockBlockEmp(Nullable<int> id, Nullable<System.DateTime> date)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UnBlockBlockEmp", idParameter, dateParameter);
        }
    
        public virtual int uspLogError(ObjectParameter errorLogID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogError", errorLogID);
        }
    
        public virtual int uspPrintError()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPrintError");
        }
    
        public virtual ObjectResult<spSearchKeyPrice_Result> spSearchKeyPrice(string tittle, Nullable<decimal> gianho, Nullable<decimal> gialon)
        {
            var tittleParameter = tittle != null ?
                new ObjectParameter("tittle", tittle) :
                new ObjectParameter("tittle", typeof(string));
    
            var gianhoParameter = gianho.HasValue ?
                new ObjectParameter("gianho", gianho) :
                new ObjectParameter("gianho", typeof(decimal));
    
            var gialonParameter = gialon.HasValue ?
                new ObjectParameter("gialon", gialon) :
                new ObjectParameter("gialon", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchKeyPrice_Result>("spSearchKeyPrice", tittleParameter, gianhoParameter, gialonParameter);
        }
    
        public virtual int spUpdateAccount(Nullable<int> account_id, string password)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAccount", account_idParameter, passwordParameter);
        }
    }
}
