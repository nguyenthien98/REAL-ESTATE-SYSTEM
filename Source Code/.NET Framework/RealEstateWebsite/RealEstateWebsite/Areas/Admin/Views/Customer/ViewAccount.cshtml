@using RealEstateWebsite.Models
@using PagedList.Mvc
@model PagedList.IPagedList<Account>

@{
    ViewBag.Title = "View Account | Real Estate System";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-lg-12">
        <h3 class="page-header">
            <i class="fa fa-laptop"></i> View Account
        </h3>
        <ol class="breadcrumb">
            <li>
                <i class="fa fa-home"></i>
                <a href="/Admin/Home/Index">Home</a>
            </li>
            <li>
                <i class="fa fa-laptop"></i>View Account
            </li>
        </ol>
    </div>
</div>

<table class="table table-striped table-advance table-hover">
    <thead>
        <tr>
            <th>No</th>
            <th><i class="icon_key_alt"></i> Account_ID</th>
            <th><i class="icon_profile"></i> UserName</th>
            <th><i class="icon_profile"></i> Type</th>
            <th><i class="icon_cogs"></i> Action</th>
        </tr>
    </thead>
    <tbody>
        @{
            for (int i = 0; i < Model.Count; i++)
            {
                <tr>
                    <td>@(i + 1)</td>
                    <td class="col-sm-2">@Model[i].Account_ID</td>
                    <td class="col-sm-2">@Model[i].UserName</td>
                    <td class="col-sm-1">@Html.DisplayFor(modelItem => Model[i].Customers.SingleOrDefault().Type.Type_Name)</td>
                    <td>
                        <div class="modal-area-button">
                            @{
                                string detail = "d" + Model[i].Account_ID.ToString();
                                <button type="button" class="btn btn-custon-rounded-three btn-primary btn-xs" data-toggle="modal" data-target="#@detail">Details</button>
                            <!-- Modal -->

                                <div class="modal fade" id="@detail" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                    <div class="center">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                @using (Html.BeginForm())
                                                {
                                                    @Html.ValidationSummary(true, null, new { @class = "alert alert-block alert-danger fade in" })
                                                    <div class="modal-header">
                                                        <h4 class="modal-title" id="exampleModalLabel">Details Account</h4>
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                            <span aria-hidden="false">&times;</span>
                                                        </button>
                                                    </div>


                                                    <div class="col-lg-12">
                                                        <div class="form-group">
                                                            <div class="col-lg-12">
                                                                @Html.LabelFor(modelItem => Model[i].Account_ID)
                                                                @Html.EditorFor(modelItem => Model[i].Account_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <div class="col-lg-12">
                                                                @Html.LabelFor(modelItem => Model[i].UserName)
                                                                @Html.EditorFor(modelItem => Model[i].UserName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <div class="col-lg-12">
                                                                @Html.LabelFor(modelItem => Model[i].Customers.SingleOrDefault().Type.Type_Name)
                                                                @Html.EditorFor(modelItem => Model[i].Customers.SingleOrDefault().Type.Type_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                            </div>
                                                        </div>

                                                        <div class="form-group">
                                                            <div class="col-lg-12">
                                                                @Html.LabelFor(modelItem => Model[i].Customers.SingleOrDefault().Customer_ID)
                                                                @Html.EditorFor(modelItem => Model[i].Customers.SingleOrDefault().Customer_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                            </div>
                                                        </div>

                                                        <div class="form-group">
                                                            <div class="col-lg-12">
                                                                @Html.Label("Status")
                                                                @{
                                                                    if (Model[i].Customers.SingleOrDefault().Blocks.LastOrDefault() != null)
                                                                    {
                                                                        if ((Model[i].Customers.SingleOrDefault().Blocks.LastOrDefault().Block_ID != 0) && (Model[i].Customers.SingleOrDefault().Blocks.LastOrDefault().UnBlockDate > DateTime.Now))
                                                                        {
                                                                            <a>Blocked</a><br />
                                                                            @Html.Label("By Employee")
                                                                            @Html.EditorFor(modelItem => Model[i].Customers.SingleOrDefault().Blocks.LastOrDefault().Employee.FullName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                                            @Html.Label("Reason")
                                                                            @Html.EditorFor(modelItem => Model[i].Customers.SingleOrDefault().Blocks.LastOrDefault().Reason, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                                        }
                                                                        else
                                                                        {
                                                                            <a>Active</a>
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        <a>Active</a>
                                                                    }
                                                                }
                                                            </div>
                                                        </div>



                                                    </div>

                                                                    }
                                                <div class="modal-footer">
                                                    <div class="col-lg-12">
                                                        <form action="@Url.Action("EditCustomer", "Customer", new { @customer_id = Model[i].Customers.SingleOrDefault().Customer_ID })" method="post">
                                                            <input type="submit" value="Edit" class="btn btn-custon-rounded-three btn-primary btn-xs">
                                                            <button type="button" class="btn btn-custon-rounded-three btn-xs" data-dismiss="modal">Close</button>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @{
                                string re = "r" + Model[i].Account_ID.ToString();
                                <button type="button" class="btn btn-custon-rounded-three btn-xs btn-success" data-toggle="modal" data-target="#@re">ResetPass</button>
                            <!-- Modal -->

                                <div class="modal fade" id="@re" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                    <div class="center">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                @using (Html.BeginForm("ResetPass", "Customer", FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data", @class = "dropzone dropzone-custom needsclick add-professors dz-clickable", @id = "resetform", @novalidate = "novalidate" }))
                                                {
                                                    @Html.ValidationSummary(true, null, new { @class = "alert alert-block alert-danger fade in" })
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="exampleModalLabel">Reset Password Account</h5>
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                            <span aria-hidden="true">&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body">

                                                        <div class="form-group">
                                                            <span class="input-group-addon"><i class="icon_profile"></i></span>
                                                            @Html.LabelFor(model => Model[i].Account_ID)<br />
                                                            <input type="text" name="iDEmp" value="@Model[i].Account_ID" readonly>
                                                        </div>

                                                        <input type="password" class="input-sm form-control" placeholder="Password" id="password1" required>

                                                        <div class="form-group">
                                                            <div class="row">
                                                                @*<div class="col-sm-12 col-sm-offset-3">*@
                                                                <div class="col-lg-12">

                                                                    @*<input type="password" class="input-sm form-control" name="password1" id="password1" placeholder="New Password" autocomplete="off">*@
                                                                    <div class="row">
                                                                        @*<div class="col-sm-6">
                                                                                <span id="8char" class="glyphicon glyphicon-remove" style="color:#FF0004;"></span> 8 Characters Long<br>
                                                                                <span id="ucase" class="glyphicon glyphicon-remove" style="color:#FF0004;"></span> One Uppercase Letter
                                                                            </div>
                                                                            <div class="col-sm-6">
                                                                                <span id="lcase" class="glyphicon glyphicon-remove" style="color:#FF0004;"></span> One Lowercase Letter<br>
                                                                                <span id="num" class="glyphicon glyphicon-remove" style="color:#FF0004;"></span> One Number
                                                                            </div>*@
                                                                    </div>
                                                                    <p></p>
                                                                    <input type="password" class="input-sm form-control" name="password2" id="password2" placeholder="Confirm Password" autocomplete="off">
                                                                    <div class="row">
                                                                        <div class="col-sm-12">
                                                                            <span id="pwmatch" class="glyphicon glyphicon-remove" style="color:#FF0004;"></span> Passwords Match
                                                                        </div>
                                                                    </div>

                                                                </div>
                                                            </div><!--/row-->
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="submit" class="btn btn-success" id="btnSubmit">Save changes</button>
                                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                    </div>
                                                }

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                    </td>

                </tr>
                                }
        }


    </tbody>
</table>

<div align="center">@Html.PagedListPager(Model, page => Url.Action("ViewAccount", new { page = page }));</div>

<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js"></script>
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
<script>
    $("input[type=password]").keyup(function () {
        var ucase = new RegExp("[A-Z]+");
        var lcase = new RegExp("[a-z]+");
        var num = new RegExp("[0-9]+");

        //if($("#password1").val().length >= 8){
        //	$("#8char").removeClass("glyphicon-remove");
        //	$("#8char").addClass("glyphicon-ok");
        //	$("#8char").css("color","#00A41E");
        //}else{
        //	$("#8char").removeClass("glyphicon-ok");
        //	$("#8char").addClass("glyphicon-remove");
        //	$("#8char").css("color","#FF0004");
        //}

        //if(ucase.test($("#password1").val())){
        //	$("#ucase").removeClass("glyphicon-remove");
        //	$("#ucase").addClass("glyphicon-ok");
        //	$("#ucase").css("color","#00A41E");
        //}else{
        //	$("#ucase").removeClass("glyphicon-ok");
        //	$("#ucase").addClass("glyphicon-remove");
        //	$("#ucase").css("color","#FF0004");
        //}

        //if(lcase.test($("#password1").val())){
        //	$("#lcase").removeClass("glyphicon-remove");
        //	$("#lcase").addClass("glyphicon-ok");
        //	$("#lcase").css("color","#00A41E");
        //}else{
        //	$("#lcase").removeClass("glyphicon-ok");
        //	$("#lcase").addClass("glyphicon-remove");
        //	$("#lcase").css("color","#FF0004");
        //}

        //if(num.test($("#password1").val())){
        //	$("#num").removeClass("glyphicon-remove");
        //	$("#num").addClass("glyphicon-ok");
        //	$("#num").css("color","#00A41E");
        //}else{
        //	$("#num").removeClass("glyphicon-ok");
        //	$("#num").addClass("glyphicon-remove");
        //	$("#num").css("color","#FF0004");
        //}

        if ($("#password1").val() == $("#password2").val()) {
            $("#pwmatch").removeClass("glyphicon-remove");
            $("#pwmatch").addClass("glyphicon-ok");
            $("#pwmatch").css("color", "#00A41E");
        } else {
            $("#pwmatch").removeClass("glyphicon-ok");
            $("#pwmatch").addClass("glyphicon-remove");
            $("#pwmatch").css("color", "#FF0004");
        }
    });</script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script type="text/javascript">
    $(function () {
        $("#btnSubmit").click(function () {
            var password = $("#password1").val();
            var confirmPassword = $("#password2").val();
            if (password != confirmPassword) {
                alert("Passwords do not match.");
                return false;
            }
            return true;
        });
    });
</script>
